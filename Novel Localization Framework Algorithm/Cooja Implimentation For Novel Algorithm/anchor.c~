#include "contiki.h"
#include "lib/list.h"
#include "lib/memb.h"
#include "lib/random.h"
#include "net/rime.h"
#include <stdio.h>
#include "node-id.h"
#include "dev/leds.h"


/* This structure holds information about neighbors. */
struct neighbor {
  struct neighbor *next;
  rimeaddr_t addr;
};
rimeaddr_t next_hop; uint8_t nbr_hop;

/* This structure holds information about anchor. */
struct anchor {
   uint8_t type;
   uint8_t  id;
   float  x;
   float  y;
   uint8_t  hop_count;
   float Av_Hop_Size;
  } anchor;
struct anchor *anc;

struct AncAvHopSize {
   uint8_t type;
   uint8_t  id;
   float Av_Hop_Size;
  } AncAvHopSize;
struct AncAvHopSize *avh;
struct AncAvHopSize current_AncAvHopSize;int avhopsize_counter=0;

struct position {
   uint8_t id;
   float x;
   float y
  } position;
struct position *pos;

#define NBR_ANCHOR 3
struct anchor anchor_table[NBR_ANCHOR-1];int anchor_counter=0;
struct anchor current_anchor;

/* This #define defines the maximum amount of neighbors we can remember. */
#define MAX_NEIGHBORS 16


/* This MEMB() definition defines a memory pool from which we allocate
   neighbor entries. */
MEMB(neighbors_memb, struct neighbor, MAX_NEIGHBORS);


/* The neighbors_list is a Contiki list that holds the neighbors we
   have seen thus far. */
LIST(neighbors_list);


/* These hold the broadcast and unicast structures, respectively. */
static struct broadcast_conn broadcast;
static struct unicast_conn unicast;


/*---------------------------------------------------------------------------*/
/* We first declare our processes. */
PROCESS(broadcast_process, "Broadcast process");
PROCESS(flooding_process, "Flooding Process");
PROCESS(unicast_process, "Unicast process");
PROCESS(blink_process, "LED blink process");
PROCESS(display_process, "Display process");
PROCESS(av_hopsize_process, "Average HopSize process");


/* The AUTOSTART_PROCESSES() definition specifices what processes to
   start when this module is loaded. We put both our processes
   there. */
AUTOSTART_PROCESSES(&broadcast_process, &unicast_process);
/*---------------------------------------------------------------------------*/
/* This function is called whenever a broadcast message is received. */
static void broadcast_recv(struct broadcast_conn *c, const rimeaddr_t *from)
{
  struct neighbor *n;
  anc = packetbuf_dataptr();
  process_start(&blink_process, NULL);
    /*  Registration of Anchor information in the Anchors table */
  if(anc->type==0){ 
       int i=0; 
       for(i=0;i<anchor_counter;i++){
	  if ((anc->id==anchor_table[i].id) &&(anc->id!=0)){
	     if(anc->hop_count <anchor_table[i].hop_count){
		anchor_table[i].hop_count=anc->hop_count; 
		if(anc->id==1){
			rimeaddr_copy(&next_hop, from);
			nbr_hop=anc->hop_count;
		}  
		process_start(&flooding_process, NULL);           
	     }
	     else{
                 anc->hop_count=anchor_table[i].hop_count;  		 
             }   
	   //process_start(&flooding_process, NULL);	         	
	   break;              
	  }
       } 
       if((i==anchor_counter)&&(anc->id!=node_id)&&(anc->id!=0)){
  	  anchor_table[anchor_counter]=*anc;anchor_counter++; 
		if(anc->id==1){
			rimeaddr_copy(&next_hop, from);
			nbr_hop=anc->hop_count;
		} 
//printf("%d/%d\n",anchor_counter,anc->type);
 	  process_start(&flooding_process, NULL);i=0;     
       }
   }
    /*************************************************************/
  else if(anc->type==1){
       avh = anc;
       int i=0; 
       for(i=0;i<anchor_counter;i++){
	  if ((avh->id==anchor_table[i].id)&&(anchor_table[i].Av_Hop_Size==0)){
		anchor_table[i].Av_Hop_Size=avh->Av_Hop_Size;    
		avhopsize_counter++;       
	   process_start(&flooding_process, NULL);		   
	   break;              
	  }
          //process_start(&flooding_process, NULL);
       } 
   }
    /*************************************************************/ 
}
/* This is where we define what function to be called when a broadcast
   is received. We pass a pointer to this structure in the
   broadcast_open() call below. */
static const struct broadcast_callbacks broadcast_call = {broadcast_recv};
/*---------------------------------------------------------------------------*/
/* This function is called for every incoming unicast packet. */
static void recv_uc(struct unicast_conn *c, const rimeaddr_t *from)
{
   
   pos= packetbuf_dataptr();
   if(node_id==1){
      int dec_x = pos->x; float frac_x = pos->x - dec_x;  
      int dec_y = pos->y; float frac_y = pos->y - dec_y;
      printf("Node %u: x=%d.%02d, y=%d.%02d\n",pos->id,dec_x,abs((int)(frac_x*100)),dec_y,abs((int)(frac_y*100)));/**/
   }
   else{
      packetbuf_copyfrom(pos, sizeof(struct position));
      unicast_send(&unicast, &next_hop);
   }
}
static const struct unicast_callbacks unicast_callbacks = {recv_uc};
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(broadcast_process, ev, data)
{
  node_id_burn(1);
  cc2420_set_txpower(2);
  static struct etimer et1;
 
  current_anchor.id=node_id; current_anchor.hop_count=1;current_anchor.type=0;
  current_AncAvHopSize.id=node_id;current_AncAvHopSize.type=1;

  PROCESS_EXITHANDLER(broadcast_close(&broadcast);)
  PROCESS_BEGIN();
  broadcast_open(&broadcast, 129, &broadcast_call);
  
  switch(node_id){
     case 1: current_anchor.x =4.975; current_anchor.y =2.490;break;
     case 2: current_anchor.x =6.765; current_anchor.y =5.412;break;
     case 3: current_anchor.x =8.428; current_anchor.y =2.208;break;
  }

  if (node_id==1){
  etimer_set(&et1, (CLOCK_SECOND)+random_rand() % (CLOCK_SECOND));
  PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et1));
printf("ANC_Start\n");
  packetbuf_copyfrom(&current_anchor, sizeof(struct anchor));
  broadcast_send(&broadcast);
leds_on(LEDS_RED);
  }
  else if (node_id==2){
  PROCESS_WAIT_EVENT_UNTIL(anchor_counter==NBR_ANCHOR-2);
  etimer_set(&et1, (CLOCK_SECOND)*15+random_rand() % (CLOCK_SECOND)*5);
  PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et1));
printf("ANC_Start\n");
  packetbuf_copyfrom(&current_anchor, sizeof(struct anchor));
  broadcast_send(&broadcast);
leds_on(LEDS_RED);
  }
  
  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(flooding_process, ev, data)
{
  static struct etimer et1;

  PROCESS_EXITHANDLER(broadcast_close(&broadcast);)
  PROCESS_BEGIN();
  broadcast_open(&broadcast, 129, &broadcast_call);

 
  etimer_set(&et1, (CLOCK_SECOND)+random_rand() % (CLOCK_SECOND)*10);
  PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et1));
  if (anc->type==0){
     anc->hop_count++;
     packetbuf_copyfrom(*(&anc), sizeof(struct anchor));
     broadcast_send(&broadcast);
       if(anchor_counter==NBR_ANCHOR-1){
         etimer_set(&et1, (CLOCK_SECOND)*5+random_rand() % (CLOCK_SECOND)*10);
         PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et1));
         process_start(&display_process, NULL);
	 process_start(&av_hopsize_process, NULL);
       }
  }
  else if(anc->type==1){
     packetbuf_copyfrom(*(&avh), sizeof(struct AncAvHopSize));
     broadcast_send(&broadcast);
  }



  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(unicast_process, ev, data)
{
  PROCESS_EXITHANDLER(unicast_close(&unicast);)   
  PROCESS_BEGIN();
  unicast_open(&unicast, 146, &unicast_callbacks);

  PROCESS_END();
}
/*---------------------------------------------------------------------------*/
 PROCESS_THREAD(blink_process, ev, data)
 {
     static struct etimer timer;
     PROCESS_BEGIN(); 
         // update the LEDs
         leds_on(LEDS_GREEN);
	 // we set the timer from here every time
         etimer_set(&timer, CLOCK_SECOND/4);
         // and wait until the vent we receive is the one we're waiting for
         PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&timer));
	 leds_off(LEDS_GREEN);	 	 
     PROCESS_END();
 }
/*---------------------------------------------------------------------------*/
 PROCESS_THREAD(av_hopsize_process, ev, data)
 {
       static struct etimer et1;

  PROCESS_EXITHANDLER(broadcast_close(&broadcast);)
  PROCESS_BEGIN();
  broadcast_open(&broadcast, 129, &broadcast_call);

	// The average hop-size
	double numenator=0; uint8_t denominator=0;
         int j=0;
        for(j=0;j<anchor_counter;j++){
	   numenator+=sqrt(pow(current_anchor.x-anchor_table[j].x,2)
                          +pow(current_anchor.y-anchor_table[j].y,2));
           denominator+=anchor_table[j].hop_count;
	}
        current_anchor.Av_Hop_Size=numenator/denominator; 
	current_AncAvHopSize.Av_Hop_Size=numenator/denominator;
	int dec = current_AncAvHopSize.Av_Hop_Size;
      	float frac = current_AncAvHopSize.Av_Hop_Size - dec;
//printf("AV_HopSize=%d.%02u\n",dec,(unsigned int)(frac * 100));
//printf("%u.%u, %u\n",(next_hop.u8[0]),(next_hop.u8[1]),nbr_hop);	
anchor_counter++;
  if (node_id==1){
  etimer_set(&et1, (CLOCK_SECOND)*10+random_rand() % (CLOCK_SECOND)*5);
  PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et1));
printf("AVH_Start\n");
  packetbuf_copyfrom(&current_AncAvHopSize, sizeof(struct AncAvHopSize));
  broadcast_send(&broadcast);
leds_on(LEDS_YELLOW);
  }	
  else if (node_id==2){
  PROCESS_WAIT_EVENT_UNTIL(avhopsize_counter==NBR_ANCHOR-2);
  etimer_set(&et1, (CLOCK_SECOND)*15+random_rand() % (CLOCK_SECOND)*5);
  PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et1));
printf("AVH_Start\n");
  packetbuf_copyfrom(&current_AncAvHopSize, sizeof(struct AncAvHopSize));
  broadcast_send(&broadcast);
leds_on(LEDS_YELLOW);
  }
  else if (node_id==3){
  //PROCESS_WAIT_EVENT_UNTIL(anchor_counter==NBR_ANCHOR-1);
  etimer_set(&et1, (CLOCK_SECOND)*10+random_rand() % (CLOCK_SECOND));
  PROCESS_WAIT_EVENT_UNTIL(etimer_expired(&et1));
printf("ANC&AVH_Start\n");
  packetbuf_copyfrom(&current_anchor, sizeof(struct anchor));
  broadcast_send(&broadcast);
leds_on(LEDS_RED);
  }

leds_on(LEDS_YELLOW);

     PROCESS_END();
 }
/*---------------------------------------------------------------------------*/
 PROCESS_THREAD(display_process, ev, data)
 { 
     PROCESS_BEGIN(); 
  /***************** Viewing the neighbors_list ****************** /
  for(n = list_head(neighbors_list); n != NULL; n = list_item_next(n)) {
    printf("%u.%u/",*(&n->addr.u8[0]),*(&n->addr.u8[1]));
  }printf("\n");
  /***************************************************************/
  /***************** Viewing the Anchors table ******************/
  
  int j=0;
  for(j=0;j<anchor_counter;j++) {
    printf("Anc=%u,Nbr_hop=%u/",anchor_table[j].id,anchor_table[j].hop_count);
  }
  printf("\n");
  /***************************************************************/

   	 
     PROCESS_END();
 }
/*---------------------------------------------------------------------------*/
